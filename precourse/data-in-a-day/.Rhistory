# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" &train$SibSp == "0"] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
prop.table(table(train$SibSp, train$Survived))
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" &train$SibSp == "0"] <- 1
# Assign value of 0 for all passengers with > 3 siblings
train$ModelPrediction[train$SibSp > 3] <- 0
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[train$SibSp > 3] <- 0
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction <- 0
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[train$Sex == "female" &train$SibSp == "0"] <- 1
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[train$SibSp > 3] <- 0
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[train$SibSp > 2] <- 0
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[train$SibSp > 4] <- 0
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" &train$SibSp == "0"] <- 1
# Assign value of 0 for all passengers with > 3 siblings
train$ModelPrediction[train$SibSp < 2] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction <- 0
# Assign value of 0 for all passengers with > 3 siblings
train$ModelPrediction[train$SibSp < 2] <- 1
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" &train$SibSp == "0"] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" &train$SibSp == "0"] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
train$ModelPrediction[train$Sex == "female" & train$SibSp == "0"] <- 1
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" & train$SibSp == "0"] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
submission <- data.frame(test$PassengerId)
head(submission)
names(submission)[names(submission) == "test.PassengerId"] <- "PassengerId"
head(submission)
test$Survived <- 0
head(test)
test$Survived[test$Sex == "female"] <- 1
head(test)
test$Survived[test$Pclass == "3"] <- 0
test$Survived[(test$Pclass == "1" | test$Pclass == "2") & test$Sex == "male" & test$Age < 18] <- 1
test$Survived[test$Sex == "female" & test$SibSp == "0"] <- 1
View(test)
submission$Survived <- test$Survived
write.csv(submission, file = "titanic_in_r_submission.csv")
setwd(Documents/data-fellowship/titanic-in-r)
setwd(Documents/data-fellowship/titanic-in-r/)
# The purpose of this code is to predict and assign survival
# values to Titanic passengers with unknown survival statistics
# based on data analysis.
# Set my working directory to one where my files are stored.
setwd("~/Downloads")
# Import my test and training datasets and save them in variables
library(readxl)
test <- read_excel("~/Documents/data-fellowship/titanic-in-r/test.xlsx")
train <- read_excel("~/Documents/data-fellowship/titanic-in-r/train.xlsx")
#######################################################
# Explore the data
#######################################################
# Start by making sure our data types are correct
# First the training data
# Check out what data types are included
str(train)
# Convert Pclass and Survived to factors in the training data
train$Pclass <- as.factor(train$Pclass)
train$Survived <- as.factor(train$Survived)
# Convert names to strings in the training data
train$Name <- as.character(train$Name)
# Now the test data
# Convert Pclass and Survived to factors in the test data
test$Pclass <- as.factor(test$Pclass)
# Convert names to strings in the test data
test$Name <- as.character(test$Name)
# Now let's look for duplicates
# Check there are 891 unique names
length(unique(train$Name))
# Check there are 418 unique names
length(unique(test$Name))
# Let's explore the data a bit
table(train$Survived)
prop.table(table(train$Survived))
# Load ggplot2
install.packages("ggplot2")
library(ggplot2)
ggplot(train, aes(x = Sex, fill = factor(Survived))) +
geom_bar(width = 0.5) +
xlab("Sex") +
ylab("Total count") +
labs(fill = "Survived")
#######################################################
# Create my first model
#######################################################
# Create a new column in train
train$ModelPrediction <- "TBD"
# Check the column was created
head(train)
# Assisgn a value of 0 to each observation in ModelPrediction
train$ModelPrediction <- 0
# Check ModelPrediction is same type as Survived
str(train$ModelPrediction)
# Calculate the percentage accuracy of your current predictions
sum(train$ModelPrediction == train$Survived)/nrow(train)
# Reset ModelPrediction value to 0
train$ModelPrediction <- "TBD"
# Assign Survived value of 0 for every Male, and value of 1 for every Female in train data
train$ModelPrediction[train$Sex == "male"] <- 0
train$ModelPrediction[train$Sex == "female"] <- 1
# Check the Survived values have been created
head(train)
# Check the new model percentage accuracy of your current predictions
sum(train$ModelPrediction == train$Survived)/nrow(train)
# Use table function to check whether Pclass could be a good predictor of survival rates
table(train$Pclass, train$Survived)
# Use another table function to compare the Pclass and Survived rates
prop.table(table(train$Pclass, train$Survived))
# Use ggplot to create a bar graph of
ggplot(train, aes(x = Sex, fill = Survived)) +
geom_bar(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total count") +
labs(fill = "Survived")
#######################################################
# My second model
#######################################################
# Reset ModelPrediction to 0
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
# Create a visualisation that helps show the relationship between Pclass, Sex, Age, and Survival
ggplot(train, aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_bar(width = 10) +
xlab("Age") +
ylab("Total count")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Set my working directory to one where my files are stored.
setwd("~/Documents/data-fellowship/titanic/in/r")
# Set my working directory to one where my files are stored.
setwd("~/Documents/data-fellowship/titanic-in-r/")
setwd("~/Documents/data-fellowship/titanic-in-r/")
setwd("~/Documents/data-fellowship/titanic-in-r")
setwd("~/Documents/data-fellowship/titanic-in-r")
ggplot(train, aes(x = Sex, fill = factor(Survived))) +
geom_bar(width = 0.5) +
xlab("Sex") +
ylab("Total count") +
labs(fill = "Survived")
boring_function()
boring_function("hello")
view(test)
test
view(test)
View(test)
head(test)
submission <- data.frame(test$PassengerId)
# View the first few rows of your new dataframe
head(submission)
# Rename the column header to match the
# submission guidelines
names(submission)[names(submission) == "test.PassengerId"] <- "PassengerId"
# Check the name has changed
head(submission)
# Let's start assigning survival values to our test data
# like we did with our training data by creating a column
# called Survived that assumes everyone perished.
test$Survived <- 0
# Check our column has been created appropriately
head(test)
# Next, we can again say all females survive
test$Survived[test$Sex == "female"] <- 1
# Again, check whether our dataframe looks as it should
head(test)
# Now, assume all females in third class perish
test$Survived[test$Pclass == "3"] <- 0
# Assume all males in first and second class under
# 18 surived
test$Survived[(test$Pclass == "1" | test$Pclass == "2") & test$Sex == "male" & test$Age < 18] <- 1
# Assume all female passengers with no siblings survived
test$Survived[test$Sex == "female" & test$SibSp == "0"] <- 1
# Glance over your new predictions and see
# if they seem reasonable
View(test)
# Copy your new predictions to a column called
# Survived in your "submission" dataframe
submission$Survived <- test$Survived
# Export your predictions to csv so you can upload them
# to the competition!
write.csv(submission, file = "titanic_in_r_submission.csv")
setwd(~/Documents/data-fellowship/data-in-a-day)
setwd(Documents/data-fellowship/data-in-a-day)
setwd(Documents)
setwd(..)
setwd(~)
setwd('..')
setwd(Documents/data-fellowship/data-in-a-day)
setwd('..')
setwd(~/Documents/data-fellowship/data-in-a-day)
setwd(~Documents/data-fellowship/data-in-a-day)
setwd(Documents/data-fellowship/data-in-a-day)
setwd(Documents/data-fellowship/data-in-a-day)
setwd(Documents/data-fellowship/diad)
setwd("~/Documents/data-fellowship/diad")
setwd("~/Documents/data-fellowship/diad")
data = read.csv('xbox.csv')
View(data)
View(data)
data = read.csv('xbox.csv')
data = read.csv('xbox.csv') <- xbox
xbox <- data = read.csv('xbox.csv') <- xbox
xbox <- data = read.csv('xbox.csv')
View(data)
xbox <- data
View(data)
View(xbox)
rm (my_char)
rm (my_div)
rm (mpg.midsize, my_seq)
rm (old.dir, my_na,, my_name, flips, flips2, ints, patients)
rm (old.dir, my_na, my_name, flips, flips2, ints, patients)
rm (x, y, z)
rm (%p%)
rm (boring_function())
rm ("boring_function")
rm ("%p%")
rm (cars, cls_list, data, flag_colors)
rm (flag_shapes)
rm (flags)
rm (mtcards)
rm (mtcars)
rm (my_matrix, my_matrix2, my_pois, my_vector)
rm (mypois)
rm (shape_mat)
rm (t2, t4, unique_vals, my_data)
rm (plants)
rm (cls_vect, cm, cnames, d1, d2)
my (my_sqrt, num_vect)
my ("my_sqrt", "num_vect")
mushrooms = read.csv('mushrooms.csv'')
mushrooms
View(mushrooms)
library(readr)
mushrooms <- read_csv("mushrooms.csv")
View(mushrooms)
# import the dataset
df <- read.csv('mushrooms.csv')
rm(mushrooms)
head(df)
str(df)
summary(df)
table(df)
prop.table(df)
str(df)
summary(df)
head(df)
summary(df)
prop.table(df[df$cap.color])
prop.table(df[df$cap.color, df$cap-surface])
prop.table(df[df$cap.color, df$cap.surface])
ggplot(df, aes(`odor`, fill = `class`)) + geom_bar() + labs(title =
"Stacked Bar Chart", x = "odor" , y = "count of odors"  )
library(ggplot2)
ggplot(df, aes(`odor`, fill = `class`)) + geom_bar() + labs(title =
"Stacked Bar Chart", x = "odor" , y = "count of odors"  )
View(df)
library(rpart)
decisionTree <- rpart(class ~ '..',data=df,method="class)
decisionTree <- rpart(class ~ odor + cap.color,data=df,method="class)
decisionTree <- rpart(class ~ .,data=df,method="class)
decisionTree <- rpart(class ~ .,data=df,method="class"")
decisionTree <- rpart(class ~ .,data=df,method="class")
View(decisionTree)
summary(decisionTree)
summary(decisionTree)
library(rpart.plot)
# libraries
library(ggplot2)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
# libraries
library(ggplot2)
library(rpart)
library(rpart.plot)
# create a decision tree
rpart.plot(decisionTree)
?rpart.plot
rpart.plot(decisionTree, extra = 1)
rpart.plot(decisionTree)
rpart.plot(decisionTree, extra = 8)
rpart.plot(decisionTree, extra = 8, under = TRUE)
rpart.plot(decisionTree, extra = 1, under = TRUE)
rpart.plot(decisionTree, extra = 1, under = TRUE, snip = TRUE)
rpart.plot(decisionTree, under = TRUE)
rpart.plot(decisionTree, under = TRUE, shadow.col = "darkgray")
rpart.plot(decisionTree, shadow.col = "darkgray")
rpart.plot(decisionTree, shadow.col = "red")
rpart.plot(decisionTree, shadow.col = "blue")
rpart.plot(decisionTree, box.palette = "green", shadow.col = "blue")
rpart.plot(decisionTree, box.palette = "green", shadow.col = "red")
df$odor <- NULL
decisionTree <- rpart(class ~ .,data=df,method="class")
rpart.plot(decisionTree, box.palette = "green", shadow.col = "red")
df$odor <- NULL
decisionTree <- rpart(class ~ .,data=df,method="class")
rpart.plot(decisionTree, box.palette[df$class = "p"] = "green", shadow.col = "red")
df$odor <- NULL
decisionTree <- rpart(class ~ .,data=df,method="class")
rpart.plot(decisionTree)
# evaluate the model
prediction <- predict(decisionTree, df, type="class")
correct <- prediction == df$class
data.frame(df$class, prediction, correct)
# evaluate the model
prediction <- predict(decisionTree, df, type="class")
correct <- prediction == df$class
data.frame(df$class, prediction, correct)
print(sum(correct))
print(nrow(df))
print(sum(correct)/nrow(df))
# summarise model accuracy
print(sum(correct))
print(nrow(df))
print(sum(correct)/nrow(df))
# split data into test (30%) and train (70%)
set.seed(100)  # setting seed to reproduce results of random sampling
trainingRowIndex <- sample(1:nrow(df), 0.7*nrow(df))  # row indices for training data
trainingData <- df[trainingRowIndex, ]  # model training data
testData  <- df[-trainingRowIndex, ]   # test data
# re-run model with training data
decisionTree2 <- rpart(class ~., data=trainingData, method="class")
rpart.plot(decisionTree2)
# look at predictions using our test data
prediction2 <- predict(decisionTree2, testData, type="class")
sum(prediction2 == testData$class)/nrow(testData)
# libraries
library(ggplot2)
library(rpart)
library(rpart.plot)
# import the dataset
df <- read.csv('mushrooms.csv')
# explore the data
head(df)
summary(df)
# visualise the data
library(ggplot2)
ggplot(df, aes(`odor`, fill = `class`)) + geom_bar() + labs(title =
"Stacked Bar Chart", x = "odor" , y = "count of odors"  )
# create the decision tree
decisionTree <- rpart(class ~ .,data=df,method="class")
# create a decision tree graph
rpart.plot(decisionTree)
# remove odor and create second decision tree graph
df$odor <- NULL
decisionTree <- rpart(class ~ .,data=df,method="class")
rpart.plot(decisionTree)
# evaluate the model
prediction <- predict(decisionTree, df, type="class")
correct <- prediction == df$class
data.frame(df$class, prediction, correct)
# summarise model accuracy
print(sum(correct))
print(nrow(df))
print(sum(correct)/nrow(df))
# split data into test (30%) and train (70%)
set.seed(100)  # setting seed to reproduce results of random sampling
trainingRowIndex <- sample(1:nrow(df), 0.7*nrow(df))  # row indices for training data
trainingData <- df[trainingRowIndex, ]  # model training data
testData  <- df[-trainingRowIndex, ]   # test data
# re-run model with training data
decisionTree2 <- rpart(class ~., data=trainingData, method="class")
rpart.plot(decisionTree2)
# look at predictions using our test data
prediction2 <- predict(decisionTree2, testData, type="class")
sum(prediction2 == testData$class)/nrow(testData)
# re-run model with training data
decisionTree2 <- rpart(class ~ cap.color, data=trainingData, method="class")
rpart.plot(decisionTree2)
# re-run model with training data
decisionTree2 <- rpart(class ~ ., data=trainingData, method="class")
rpart.plot(decisionTree2)
# Let's create a new dataframe called "submission"
# Start it with test's PassengerId column
submission <- data.frame(test$PassengerId)
# View the first few rows of your new dataframe
head(submission)
# Rename the column header to match the
# submission guidelines
names(submission)[names(submission) == "test.PassengerId"] <- "PassengerId"
# Check the name has changed
head(submission)
# Let's start assigning survival values to our test data
# like we did with our training data by creating a column
# called Survived that assumes everyone perished.
test$Survived <- 0
# Check our column has been created appropriately
head(test)
# Next, we can again say all females survive
test$Survived[test$Sex == "female"] <- 1
# Again, check whether our dataframe looks as it should
head(test)
# Now, assume all females in third class perish
test$Survived[test$Pclass == "3"] <- 0
# Assume all males in first and second class under
# 18 surived
test$Survived[(test$Pclass == "1" | test$Pclass == "2") & test$Sex == "male" & test$Age < 18] <- 1
# Assume all female passengers with no siblings survived
test$Survived[test$Sex == "female" & test$SibSp == "0"] <- 1
# Glance over your new predictions and see
# if they seem reasonable
View(test)
# Copy your new predictions to a column called
# Survived in your "submission" dataframe
submission$Survived <- test$Survived
# Export your predictions to csv so you can upload them
# to the competition!
write.csv(submission, file = "titanic_in_r_submission.csv")
#######################################################
# My fourth model
#######################################################
# Check for other variable that could be a good indicator of survival
table(train$SibSp, train$Survived)
prop.table(table(train$SibSp, train$Survived))
# Reset ModelPrediction to 0
train$ModelPrediction <- 0
# Assign value of 1 to all Females, except Females in Pclass 3
train$ModelPrediction[train$Sex == "female" & (train$Pclass == "1" | train$Pclass == "2")] <- 1
# Assign value of 1 to all Males in Pclass 1 & 2, under the age of 18
train$ModelPrediction[(train$Pclass == "1" | train$Pclass == "2") & train$Sex == "male" & train$Age < 18] <- 1
# Assign value of 1 for all female passengers with no siblings
train$ModelPrediction[train$Sex == "female" & train$SibSp == "0"] <- 1
# Calculate my new model percentage accuracy
sum(train$ModelPrediction == train$Survived)/nrow(train)
ggplot(train, aes(x = Sex, fill = factor(Survived))) +
geom_bar(width = 0.5) +
xlab("Sex") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(train, aes(x = Sex, fill = Survived)) +
geom_bar(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(train, aes(x = Sex, fill = Survived)) +
geom_bar(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(train, aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_bar(width = 10) +
xlab("Age") +
ylab("Total count")
